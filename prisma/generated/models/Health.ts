
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Health` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Health
 * 
 */
export type HealthModel = runtime.Types.Result.DefaultSelection<Prisma.$HealthPayload>

export type AggregateHealth = {
  _count: HealthCountAggregateOutputType | null
  _min: HealthMinAggregateOutputType | null
  _max: HealthMaxAggregateOutputType | null
}

export type HealthMinAggregateOutputType = {
  id: string | null
  status: boolean | null
}

export type HealthMaxAggregateOutputType = {
  id: string | null
  status: boolean | null
}

export type HealthCountAggregateOutputType = {
  id: number
  status: number
  _all: number
}


export type HealthMinAggregateInputType = {
  id?: true
  status?: true
}

export type HealthMaxAggregateInputType = {
  id?: true
  status?: true
}

export type HealthCountAggregateInputType = {
  id?: true
  status?: true
  _all?: true
}

export type HealthAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Health to aggregate.
   */
  where?: Prisma.HealthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Health to fetch.
   */
  orderBy?: Prisma.HealthOrderByWithRelationInput | Prisma.HealthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.HealthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Health from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Health.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Health
  **/
  _count?: true | HealthCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HealthMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HealthMaxAggregateInputType
}

export type GetHealthAggregateType<T extends HealthAggregateArgs> = {
      [P in keyof T & keyof AggregateHealth]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHealth[P]>
    : Prisma.GetScalarType<T[P], AggregateHealth[P]>
}




export type HealthGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HealthWhereInput
  orderBy?: Prisma.HealthOrderByWithAggregationInput | Prisma.HealthOrderByWithAggregationInput[]
  by: Prisma.HealthScalarFieldEnum[] | Prisma.HealthScalarFieldEnum
  having?: Prisma.HealthScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HealthCountAggregateInputType | true
  _min?: HealthMinAggregateInputType
  _max?: HealthMaxAggregateInputType
}

export type HealthGroupByOutputType = {
  id: string
  status: boolean
  _count: HealthCountAggregateOutputType | null
  _min: HealthMinAggregateOutputType | null
  _max: HealthMaxAggregateOutputType | null
}

type GetHealthGroupByPayload<T extends HealthGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HealthGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HealthGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HealthGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HealthGroupByOutputType[P]>
      }
    >
  > 



export type HealthWhereInput = {
  AND?: Prisma.HealthWhereInput | Prisma.HealthWhereInput[]
  OR?: Prisma.HealthWhereInput[]
  NOT?: Prisma.HealthWhereInput | Prisma.HealthWhereInput[]
  id?: Prisma.StringFilter<"Health"> | string
  status?: Prisma.BoolFilter<"Health"> | boolean
}

export type HealthOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type HealthWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.HealthWhereInput | Prisma.HealthWhereInput[]
  OR?: Prisma.HealthWhereInput[]
  NOT?: Prisma.HealthWhereInput | Prisma.HealthWhereInput[]
  status?: Prisma.BoolFilter<"Health"> | boolean
}, "id">

export type HealthOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.HealthCountOrderByAggregateInput
  _max?: Prisma.HealthMaxOrderByAggregateInput
  _min?: Prisma.HealthMinOrderByAggregateInput
}

export type HealthScalarWhereWithAggregatesInput = {
  AND?: Prisma.HealthScalarWhereWithAggregatesInput | Prisma.HealthScalarWhereWithAggregatesInput[]
  OR?: Prisma.HealthScalarWhereWithAggregatesInput[]
  NOT?: Prisma.HealthScalarWhereWithAggregatesInput | Prisma.HealthScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Health"> | string
  status?: Prisma.BoolWithAggregatesFilter<"Health"> | boolean
}

export type HealthCreateInput = {
  id?: string
  status: boolean
}

export type HealthUncheckedCreateInput = {
  id?: string
  status: boolean
}

export type HealthUpdateInput = {
  status?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type HealthUncheckedUpdateInput = {
  status?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type HealthCreateManyInput = {
  id?: string
  status: boolean
}

export type HealthUpdateManyMutationInput = {
  status?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type HealthUncheckedUpdateManyInput = {
  status?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type HealthCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type HealthMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type HealthMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
}



export type HealthSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
}, ExtArgs["result"]["health"]>



export type HealthSelectScalar = {
  id?: boolean
  status?: boolean
}

export type HealthOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "status", ExtArgs["result"]["health"]>

export type $HealthPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Health"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    status: boolean
  }, ExtArgs["result"]["health"]>
  composites: {}
}

export type HealthGetPayload<S extends boolean | null | undefined | HealthDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$HealthPayload, S>

export type HealthCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<HealthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HealthCountAggregateInputType | true
  }

export interface HealthDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Health'], meta: { name: 'Health' } }
  /**
   * Find zero or one Health that matches the filter.
   * @param {HealthFindUniqueArgs} args - Arguments to find a Health
   * @example
   * // Get one Health
   * const health = await prisma.health.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HealthFindUniqueArgs>(args: Prisma.SelectSubset<T, HealthFindUniqueArgs<ExtArgs>>): Prisma.Prisma__HealthClient<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Health that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HealthFindUniqueOrThrowArgs} args - Arguments to find a Health
   * @example
   * // Get one Health
   * const health = await prisma.health.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HealthFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, HealthFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__HealthClient<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Health that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthFindFirstArgs} args - Arguments to find a Health
   * @example
   * // Get one Health
   * const health = await prisma.health.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HealthFindFirstArgs>(args?: Prisma.SelectSubset<T, HealthFindFirstArgs<ExtArgs>>): Prisma.Prisma__HealthClient<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Health that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthFindFirstOrThrowArgs} args - Arguments to find a Health
   * @example
   * // Get one Health
   * const health = await prisma.health.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HealthFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, HealthFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__HealthClient<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Health that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Health
   * const health = await prisma.health.findMany()
   * 
   * // Get first 10 Health
   * const health = await prisma.health.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const healthWithIdOnly = await prisma.health.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends HealthFindManyArgs>(args?: Prisma.SelectSubset<T, HealthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Health.
   * @param {HealthCreateArgs} args - Arguments to create a Health.
   * @example
   * // Create one Health
   * const Health = await prisma.health.create({
   *   data: {
   *     // ... data to create a Health
   *   }
   * })
   * 
   */
  create<T extends HealthCreateArgs>(args: Prisma.SelectSubset<T, HealthCreateArgs<ExtArgs>>): Prisma.Prisma__HealthClient<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Health.
   * @param {HealthCreateManyArgs} args - Arguments to create many Health.
   * @example
   * // Create many Health
   * const health = await prisma.health.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends HealthCreateManyArgs>(args?: Prisma.SelectSubset<T, HealthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Health.
   * @param {HealthDeleteArgs} args - Arguments to delete one Health.
   * @example
   * // Delete one Health
   * const Health = await prisma.health.delete({
   *   where: {
   *     // ... filter to delete one Health
   *   }
   * })
   * 
   */
  delete<T extends HealthDeleteArgs>(args: Prisma.SelectSubset<T, HealthDeleteArgs<ExtArgs>>): Prisma.Prisma__HealthClient<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Health.
   * @param {HealthUpdateArgs} args - Arguments to update one Health.
   * @example
   * // Update one Health
   * const health = await prisma.health.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends HealthUpdateArgs>(args: Prisma.SelectSubset<T, HealthUpdateArgs<ExtArgs>>): Prisma.Prisma__HealthClient<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Health.
   * @param {HealthDeleteManyArgs} args - Arguments to filter Health to delete.
   * @example
   * // Delete a few Health
   * const { count } = await prisma.health.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends HealthDeleteManyArgs>(args?: Prisma.SelectSubset<T, HealthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Health.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Health
   * const health = await prisma.health.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends HealthUpdateManyArgs>(args: Prisma.SelectSubset<T, HealthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Health.
   * @param {HealthUpsertArgs} args - Arguments to update or create a Health.
   * @example
   * // Update or create a Health
   * const health = await prisma.health.upsert({
   *   create: {
   *     // ... data to create a Health
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Health we want to update
   *   }
   * })
   */
  upsert<T extends HealthUpsertArgs>(args: Prisma.SelectSubset<T, HealthUpsertArgs<ExtArgs>>): Prisma.Prisma__HealthClient<runtime.Types.Result.GetResult<Prisma.$HealthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Health that matches the filter.
   * @param {HealthFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const health = await prisma.health.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.HealthFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Health.
   * @param {HealthAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const health = await prisma.health.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.HealthAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Health.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthCountArgs} args - Arguments to filter Health to count.
   * @example
   * // Count the number of Health
   * const count = await prisma.health.count({
   *   where: {
   *     // ... the filter for the Health we want to count
   *   }
   * })
  **/
  count<T extends HealthCountArgs>(
    args?: Prisma.Subset<T, HealthCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HealthCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Health.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HealthAggregateArgs>(args: Prisma.Subset<T, HealthAggregateArgs>): Prisma.PrismaPromise<GetHealthAggregateType<T>>

  /**
   * Group by Health.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HealthGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends HealthGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HealthGroupByArgs['orderBy'] }
      : { orderBy?: HealthGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, HealthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Health model
 */
readonly fields: HealthFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Health.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HealthClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Health model
 */
export interface HealthFieldRefs {
  readonly id: Prisma.FieldRef<"Health", 'String'>
  readonly status: Prisma.FieldRef<"Health", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Health findUnique
 */
export type HealthFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * Filter, which Health to fetch.
   */
  where: Prisma.HealthWhereUniqueInput
}

/**
 * Health findUniqueOrThrow
 */
export type HealthFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * Filter, which Health to fetch.
   */
  where: Prisma.HealthWhereUniqueInput
}

/**
 * Health findFirst
 */
export type HealthFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * Filter, which Health to fetch.
   */
  where?: Prisma.HealthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Health to fetch.
   */
  orderBy?: Prisma.HealthOrderByWithRelationInput | Prisma.HealthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Health.
   */
  cursor?: Prisma.HealthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Health from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Health.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Health.
   */
  distinct?: Prisma.HealthScalarFieldEnum | Prisma.HealthScalarFieldEnum[]
}

/**
 * Health findFirstOrThrow
 */
export type HealthFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * Filter, which Health to fetch.
   */
  where?: Prisma.HealthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Health to fetch.
   */
  orderBy?: Prisma.HealthOrderByWithRelationInput | Prisma.HealthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Health.
   */
  cursor?: Prisma.HealthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Health from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Health.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Health.
   */
  distinct?: Prisma.HealthScalarFieldEnum | Prisma.HealthScalarFieldEnum[]
}

/**
 * Health findMany
 */
export type HealthFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * Filter, which Health to fetch.
   */
  where?: Prisma.HealthWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Health to fetch.
   */
  orderBy?: Prisma.HealthOrderByWithRelationInput | Prisma.HealthOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Health.
   */
  cursor?: Prisma.HealthWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Health from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Health.
   */
  skip?: number
  distinct?: Prisma.HealthScalarFieldEnum | Prisma.HealthScalarFieldEnum[]
}

/**
 * Health create
 */
export type HealthCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * The data needed to create a Health.
   */
  data: Prisma.XOR<Prisma.HealthCreateInput, Prisma.HealthUncheckedCreateInput>
}

/**
 * Health createMany
 */
export type HealthCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Health.
   */
  data: Prisma.HealthCreateManyInput | Prisma.HealthCreateManyInput[]
}

/**
 * Health update
 */
export type HealthUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * The data needed to update a Health.
   */
  data: Prisma.XOR<Prisma.HealthUpdateInput, Prisma.HealthUncheckedUpdateInput>
  /**
   * Choose, which Health to update.
   */
  where: Prisma.HealthWhereUniqueInput
}

/**
 * Health updateMany
 */
export type HealthUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Health.
   */
  data: Prisma.XOR<Prisma.HealthUpdateManyMutationInput, Prisma.HealthUncheckedUpdateManyInput>
  /**
   * Filter which Health to update
   */
  where?: Prisma.HealthWhereInput
  /**
   * Limit how many Health to update.
   */
  limit?: number
}

/**
 * Health upsert
 */
export type HealthUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * The filter to search for the Health to update in case it exists.
   */
  where: Prisma.HealthWhereUniqueInput
  /**
   * In case the Health found by the `where` argument doesn't exist, create a new Health with this data.
   */
  create: Prisma.XOR<Prisma.HealthCreateInput, Prisma.HealthUncheckedCreateInput>
  /**
   * In case the Health was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HealthUpdateInput, Prisma.HealthUncheckedUpdateInput>
}

/**
 * Health delete
 */
export type HealthDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
  /**
   * Filter which Health to delete.
   */
  where: Prisma.HealthWhereUniqueInput
}

/**
 * Health deleteMany
 */
export type HealthDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Health to delete
   */
  where?: Prisma.HealthWhereInput
  /**
   * Limit how many Health to delete.
   */
  limit?: number
}

/**
 * Health findRaw
 */
export type HealthFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Health aggregateRaw
 */
export type HealthAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Health without action
 */
export type HealthDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Health
   */
  select?: Prisma.HealthSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Health
   */
  omit?: Prisma.HealthOmit<ExtArgs> | null
}
