model Business {
  id                                    String @id @default(auto()) @map("_id") @db.ObjectId
  userId                                String @unique
  user                                  User   @relation(fields: [userId], references: [id], onDelete: Cascade) 

  businessName                          String 
  contactPersonName                     String
  contactPersonTitle                    String
  contactPersonEmail                    String
  contactPersonPhone                    String
  businessAddressStreet                 String
  businessAddressCity                   String
  businessAddressState                  String
  businessAddressZip                    String
  businessAddressCountry                String
  serviceAreaRadius                     Int
  yearsInBusiness                       Int
  businessDescription                   String
  coreServices                          CoreService[]
  operatingHours                        OperatingHours
  averageTravelTimeMinutes              Int
  currentSchedulingMethod               String
  logoUrl                               String?
  brandColorPrimary                     String?
  brandColorSecondary                   String?
  preferredCustomerCommunicationMethods String[]
  additionalNotes                       String?

  // Demetrius additions
  bookings                              Booking[]
  businessSlug                          String @unique

  createdAt                             DateTime @default(now())
  updatedAt                             DateTime @updatedAt

  @@map("business")
}

model Customer {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String @unique
  user                   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferredContactMethod String?
  addressStreet          String?
  addressCity            String?
  addressState           String?
  addressZip             String?
  addressCountry         String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Demetrius additions
  bookings               Booking[]

  @@map("customer")
}

model CoreService {
    id                      String       @id @default(auto()) @map("_id") @db.ObjectId
    businessId              String       @db.ObjectId
    business                Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)

    name                    String
    description             String
    durationMin             Int
    durationMax             Int
    typicalCleanersAssigned Int
    pricingModel            PricingModel
    priceMin                Float
    priceMax                Float
    rate                    Float

    bookings                Booking[]

    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt

    @@map("coreService")
}

model Booking {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    date            String
    startTime       String
    endTime         String
    notes           String?
    duration        Int
    price           Float
    rooms           Float?
    squareFootage   Float?
    status          BookingStatus @default(PENDING)

    serviceId       String        @db.ObjectId 
    service         CoreService   @relation(fields: [serviceId], references: [id])

    customerId String   @db.ObjectId
    customer   Customer @relation(fields: [customerId], references: [id])

    businessId String   @db.ObjectId
    business   Business @relation(fields: [businessId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("booking")
}

type OperatingHours {
  monday    DayOperatingHours
  tuesday   DayOperatingHours
  wednesday DayOperatingHours
  thursday  DayOperatingHours
  friday    DayOperatingHours
  saturday  DayOperatingHours
  sunday    DayOperatingHours
}

type DayOperatingHours {
  start  String
  end    String
  isOpen Boolean
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  CANCELED
  COMPLETED
}

enum PricingModel {
  HOUR
  SQFT 
  ROOM
  JOB
}